# Review of Basic Java

## Term Definitions

#### Class
a collection of variables called *fields* and functions called *methods*.

*Naming convention:* the name should always start with a capital letter; this signifies to certain compilers (and human readers) that it is a class (or ?); it is a best practice to use CamelCase; class names cannot begin with numbers or contain any spaces.

```java
class MyClass {
    // declare a Java class
}
```

#### Program
a collection of classes.

#### Variable
a name (identifier) that points to (references) a location in memory where information associated with that name can be stored. Each variable has a *data type* associated with it, which essentially restricts what that variable is allowed to reference and the operations that can be performed on it.

*Naming convention:* it is a best practice to always start variable names with a lowercase letter and use CamelCase for variable names composed from compound phrases; variable names cannot contain spaces or special characters (except underscores), and cannot begin with numbers; occasionally, Java coders begin certain special variable names (e.g.: private class variables or constants) with an underscore to distinguish them from other variables used throughout their program.

```java
DataType myVar1; // declare a variable named myVar1 having the data type DataType
DataType myVar2 = value; // declare a variable of type DataType named myVar2 and initialize it to be value
```

#### Field
a variable that is a member of a class. 

#### Function
a sequence of packaged instructions that perform a task.

*Naming convention:* it is a best practice to always start function names with a lowercase letter and use CamelCase for function names composed from compound phrases; function names cannot contain spaces or special characters (except underscores), and cannot begin with numbers.

```java
int myFunction() {
  // declare a function
}
void myFunction(int myInt) {
  // declare another function that does not return anything
}
```

#### Method
a type of function that operates on the fields of a class. 

#### Object
an instance (or variable) of a class. 

#### Stream
the flow of data from one place to another. Very often it is required to read input from stdin (standard input) and write output to stdout (standard output). One popular way to read input from stdin is by using the `Scanner` class and specifying the input stream as *System.in*. Once finished reading from an input stream, it is important to close it to avoid a resource leak. 


```java
Scanner scan = new Scanner(System.in); // create a new Scanner object that reads from the System.in stream
scan.next(); // returns the next token of input
int n = scan.nextInt(); // returns the next token of input as an int
int n = Integer.parseInt(in.nextLine()); // returns the next token of input as an int and eats the whitespace (newline)
scan.hasNext(); // returns true if there is another token of input (false otherwise)
scan.nextLine() // reads from the Scanner's current location until the beginning of the next line
scan.hasNextLine(); // returns true if there is another line of iput
scan.close(); // closes the Scanner object referenced by the scan variable
System.out.println("some output"); // prints to stdout
System.out.printf("%-15s%03d%n", s, x); // print formatted output "java           100"
System.out.format("%-15s%03d%n", s, x); // print formatted output "cpp            065"
```

[INCLUDE TABLE HERE WITH FORMATTING TAGS AND STUFF]

## Data Types

Java is considered as a *strongly typed* programming language: all variables have a particular data type. Java is also known as a *hybrid* language: it offers both *object types* and *primitive types*.

### Primitive Types
the most basic data types. They serve as the building blocks of data manipulation in Java, with only one purpose â€” containing pure, simple values of a kind. Because these data types are defined into the Java type system by default, they come with a number of operations predefined. We cannot define new operations for such primitive types. 

| Category | Type | Size(bits) | Precision | Default Value |
|----------|--------|------------|-------------------------------------------------|---------------|
Textual | `char` | 16 | All Unicode characters | '\u0000'
Textual (Integer) | `byte` | 8 | From +127 to -128 | 0
Numeric (Integer) | `short` | 16 | From +32,767 to -32,768 | 0
Numeric (Integer) | `int` | 32 | From +2,147,483,647 to -2,147,483,648 | 0
Numeric (Integer) | `long` | 64 | From +9,223,372,036,854,775,807 to -9,223,372,036,854,775,808 | 0L
Numeric (Floating point) | `float` | 32 | From 3.402,823,5 E+38 to 1.4 E-45 | 0.0f
Numeric (Floating point) | `double` | 64 | From 1.797,693,134,862,315,7 E+308 to 4.9 E-324 | 0.0d
Other | `boolean` | 1 | false, true | false
Other | `null` | -- | -- | --
Other | `void` | -- | -- | --
Other | `String` | -- | -- | null

The `String` class is not technically a primitive data type, but considering the special support given to it by the language, we could think of it as such. Enclosing a character string within double quotes automatically creates a new `String` object.

#### Operations
* Simple Assignment Operator `=`
* Arithmetic Operators `+`, `-`, `*`, `/`, `%`
* Unary Operators `+`, `-`, `++`, `--`, `!`
* Equality and Relational Operators `==`, `!=`, `>`, `>=`, `<`, `<=`
* Conditional Operators `&&`, `||`
* Ternary Operator `?:` shorthand for if-then-else statement, i.e.: if ? then : else
* Type Comparison Operator `instanceof`
* Bitwise and Bit Shift Operators
  * `~`       Unary bitwise complement
  * `<<`      Signed left shift
  * `>>`      Signed right shift
  * `>>>`     Unsigned right shift
  * `&`       Bitwise AND
  * `^`       Bitwise exclusive OR
  * `|`       Bitwise inclusive OR


### Arrays
container objects that hold a fixed number of values of a single type. The length of an array is established when the array is created. After creation, its length is fixed. Each item in an array is called an element, and each element is accessed by its numerical index. Indexing begins with 0.

```java
byte[] anArrayOfBytes; // declares a variable to refer to an array of bytes
short[] anArrayOfShorts; // does not actually create an array
long[] anArrayOfLongs; // tells the compiler that this variable will hold an array of the specified type (long)
double anArrayOfDoubles[]; // this form is discouraged
anArrayOfLongs = new long[10]; // create an array of longs
int[] anArrayOfInts = {100, 200, 300, 400, 500}; // shortcut syntax to create and initialize an array
```

We can also declare a *multidimensional array* by using two or more sets of brackets, e.g. `int[][]`. Each element, therefore, must be accessed by a corresponding number of index values. In Java, a multidimensional array is an array whose components are themselves arrays. As a consequence, the rows are allowed to vary in length.

#### Operations
Methods to perform some of the most common manipulations related to arrays:
* `arraycopy` method of the `System` class
* `copyOfRange`, `binarySearch`, `equals`, `fill`, `sort`, `parallelSort`, `toString` methods of the `java.util.Arrays` class

A note about the different ways to *copy* arrays:
* `static void arraycopy(Object src, int srcPos, Object dest, int destPos, int length)` Copies a subrray of specified length from the specified source array, beginning at the specified position, to the specified position of the destination array.
* `static <T> T[] copyOf(T[] original, int newLength)` Copies the specified array, truncating or padding with false (if necessary) so the copy has the specified length.
* `static <T> T[] copyOfRange(T[] original, int from, int to)` Copies the specified range of the specified array into a new array.
* `Object ArrayList.clone()` Returns a __shallow__ copy of this ArrayList instance.

*Shallow* vs *deep* copying
A shallow copy can be made by simply copying the reference. This can lead to unpleasant side effects if the elements of values are changed via some other reference.
A deep copy means actually creating a new array and copying over the values. (best to do it by hand: create a new array and copy each element's value - using `arraycopy` for example.)

## Control Flow Statements

### Decision-Making Statements

### Looping Statements

Diffrent types of for
```java
for (int elem : arrayOfInts) {
  // do something
}


```


### Branching Statements

## Math

`Math.random()` (between 0 and 1)
`Math.ceil(double a)`
`Math.floor(double a`
`Math.sqrt(double a)`
`Math.max(int a, int b)` (works for long, int, float, double)
`Math.pow(double a, double b)`
`Math.exp(double a)`

## Error Handling

```java
        try {
            int n = Integer.parseInt(s);
            System.out.println(n);
        }
        catch(Exception e) {
            System.out.println("Bad String");
        }
```
### Propagating Exceptions 

```java
class PropagatedException {

    void example() throws Exception{
        throw new Exception("This exception will always be thrown.");
    }
    
    public static void main(String[] args) {
        PropagatedException p = new PropagatedException();
        try{
            p.example();
        }
        catch(Exception e){
            System.err.println( e.getClass().getSimpleName() + ": " + e.getMessage() );
        }
    }
}
```

## Regular Expressions

```java
String myRegEx = ".+@gmail\\.com$"; 
Pattern p = Pattern.compile(myRegEx);
String firstName = in.next();
String emailID = in.next();
Matcher m = p.matcher(emailID);
if (m.matches())
  names.add(firstName);
```